name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run tests
      run: npm run test:coverage
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Create release assets
      run: npm run package:all
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/nestkick-linux-x64
          dist/nestkick-macos-x64
          dist/nestkick-win-x64.exe
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit
      run: npm audit --audit-level moderate
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  container-test:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        database: [postgres, mysql, sqlite, mongodb]
        orm: [prisma, typeorm, sequelize]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Generate test project
      run: |
        node dist/index.js create test-project-${{ matrix.orm }}-${{ matrix.database }} \
          --orm ${{ matrix.orm }} \
          --db ${{ matrix.database }} \
          --docker true \
          --pm npm \
          --no-interactive
    
    - name: Build and test Docker containers
      run: |
        cd test-project-${{ matrix.orm }}-${{ matrix.database }}
        docker-compose build
        docker-compose up -d
        # Wait for services to be ready
        sleep 30
        # Run health checks
        docker-compose exec -T app npm run test
        docker-compose exec -T app npm run build
        # Test database connection
        docker-compose exec -T app npm run db:migrate
        docker-compose down
    
    - name: Cleanup
      if: always()
      run: |
        docker system prune -f
        rm -rf test-project-*

  coverage:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests with coverage
      run: npm run test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
    
    - name: Check coverage thresholds
      run: |
        npm run test:coverage:check
        # Ensure coverage meets minimum requirements 